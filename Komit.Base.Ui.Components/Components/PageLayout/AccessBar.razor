@using Komit.Base.Values;
@using Komit.Base.Values.Cqrs;
@using Komit.Infrastructure.CqrsClient;
<nav class="navbar" role="navigation" aria-label="main navigation">
    <div class="navbar-brand">
        <div class="navbar-item">
            KOMiT
        </div>
        <a role="button" class="navbar-burger @(BurgerMenuIsActive ? "is-active" : "" )" aria-label="menu" aria-expanded="@BurgerMenuIsActive" @onclick=ToggleBurgerMenu>
            <span aria-hidden="true"></span>
            <span aria-hidden="true"></span>
            <span aria-hidden="true"></span>
        </a>
    </div>
    <div id="portalNavbar" class="navbar-menu @(BurgerMenuIsActive ? "is-active" : "" )">
        <div class="navbar-start">
            <div class="navbar-item has-dropdown @CanHover">
                <div class="navbar-link">
                    <I X=account_circle></I>
                    <span class="mr-1"></span>
                </div>
                <div class="navbar-dropdown">
                    <NavLink href="" class="navbar-item">Profil</NavLink>
                    <NavLink href="" class="navbar-item">System adgang</NavLink>
                    <NavLink href="" class="navbar-item">GDPR</NavLink>
                </div>
            </div>
            <div class="navbar-item has-dropdown  @CanHover">
                <div class="navbar-link">
                    @if(Access.Organization == AccessService.Unknown)
                    {
                        <span>Vælg skole & adgang</span>
                    }
                    else if (Access.Affiliation == AccessService.Unknown)
                    {
                        <span>@Access.Organization.Name: Vælg adgang</span>
                    }
                    else
                    {
                        <span>@Access.Organization.Name: @Access.Affiliation.Name</span>
                    }
                </div>
                <div class="navbar-dropdown">
                    @foreach (var organization in Access.AffiliatedOrganizations)
                    {
                        <a role="button" @onclick=@(async e => await OrganizationSelected(organization)) class="navbar-item">
                            @organization.Name @(organization == SelectedOrganization ? " *" : "")
                        </a>
                    }
                    <div class="navbar-divider"></div>
                    @foreach (var affiliation in OrganizationAffiliations)
                    {
                        <a role="button" @onclick=@(async e => await AffiliationSelected(affiliation)) class="navbar-item">@affiliation.Name</a>
                    }
                </div>
            </div>
        </div>
        <div class="navbar-end">
            <NavLink href="" class="navbar-item">ViGGO</NavLink>
            <NavLink href="" class="navbar-item">Skole</NavLink>
            <NavLink href="" class="navbar-item">Undervisning</NavLink>
            <div class="navbar-item has-dropdown @CanHover">
                <div class="navbar-link">
                    Økonomi
                </div>
                <div class="navbar-dropdown">
                    <NavLink href="finans" class="navbar-item">Finans</NavLink>
                    <NavLink href="" class="navbar-item">Løn</NavLink>
                </div>
            </div>
            <NavLink href="" class="navbar-item">System</NavLink>
            <NavLink href="" class="navbar-item">
                <I X=info></I>
            </NavLink>
            <NavLink href="" class="navbar-item">
                <I X=help></I>
            </NavLink>
            <NavLink href="" class="navbar-item mr-1">
                <I X=circle_notifications></I>
            </NavLink>
        </div>
    </div>
</nav>
@code {
    [Inject] AccessService Access { get; set; }
    [Inject] CqrsClient Client { get; set; }
    static readonly string IsHoverableClass = "is-hoverable";
    string CanHover = IsHoverableClass;
    bool BurgerMenuIsActive = false;

    IEnumerable<IdNamePair> OrganizationAffiliations { get; set; } = Enumerable.Empty<IdNamePair>();
    IdNamePair? SelectedOrganization { get; set; }
    protected override async Task OnInitializedAsync()
    {
        Client = Client.ForModule("system");
        await Access.GetAccess();
    }
    void ToggleBurgerMenu() => BurgerMenuIsActive = !BurgerMenuIsActive;

    async Task OrganizationSelected(IdNamePair organization)
    {
        SelectedOrganization = organization;
        OrganizationAffiliations = await Client
        .Query(new GetMyOrganizationAffiliations(SelectedOrganization.Id))
        .Result() ?? Enumerable.Empty<IdNamePair>();
    }
    async Task AffiliationSelected(IdNamePair affiliation)
    {
        CanHover = string.Empty;
        try
        {
            await Access.ChangeAccess(SelectedOrganization?.Id ?? default, affiliation?.Id ?? default);
        }
        finally
        {
            CanHover = IsHoverableClass;
        }
    }
}